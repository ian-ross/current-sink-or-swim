#!/usr/bin/env python3
from datetime import datetime
import math
import os
import os.path
import sys
from threading import Thread

import gi

import comms

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GObject, GLib

POWER_LIMIT = 20.0

class Handler:
    def __init__(self, builder):
        self.builder = builder
        self.current = builder.get_object("current")
        self.voltage = builder.get_object("voltage")
        self.current_set = builder.get_object("current-set")
        self.voltage_set = builder.get_object("voltage-set")
        self.power_limit = builder.get_object("power-limit")
        self.status_bar = builder.get_object("status-bar")
        self.go = builder.get_object("go")
        self.stop = builder.get_object("stop")
        self.comment_text = builder.get_object("comment")
        self.add_comment = builder.get_object("add-comment")
        self.sample_ms = 1000
        self.running = False
        self.smooth = None
        self.current_smoother = []
        self.voltage_smoother = []
        self.logfp = None
        self.t0 = datetime.now().timestamp()

        try:
            self.teensy_load = comms.TeensyLoad()
        except Exception as exc:
            print('Oops:', exc, file=sys.stderr)
            sys.exit(1)
        self.data_queue = self.teensy_load.data_queue()
        self.usb_handler = Thread(target=self.handle_usb)
        self.usb_handler.setDaemon(True)
        self.usb_handler.start()

    def handle_usb(self):
        while True:
            vals = self.data_queue.get()
            t = datetime.now().timestamp() - self.t0
            GLib.idle_add(self.set_values, (t, vals),
                          priority=GLib.PRIORITY_DEFAULT)

    def do_smooth(self, current, voltage):
        if self.smooth is None:
            return current, voltage
        nadd = self.smooth - len(self.current_smoother)
        if nadd < 1:
            nadd = 1
        self.current_smoother += nadd * [current]
        if len(self.current_smoother) > self.smooth:
            self.current_smoother = self.current_smoother[-self.smooth:]
        current = sum(self.current_smoother) / self.smooth
        self.voltage_smoother += nadd * [voltage]
        if len(self.voltage_smoother) > self.smooth:
            self.voltage_smoother = self.voltage_smoother[-self.smooth:]
        voltage = sum(self.voltage_smoother) / self.smooth
        return current, voltage

    def set_values(self, tvals):
        t, vals = tvals
        current, voltage = vals
        if self.logfp is not None:
            print('{} {} {}'.format(t, current, voltage), file=self.logfp)
        current, voltage = self.do_smooth(current, voltage)
        self.current.set_text('{:6.3f} A'.format(current))
        self.voltage.set_text('{:6.3f} V'.format(voltage))

    def onDestroy(self, *args):
        self.teensy_load.stop()
        Gtk.main_quit()

    def onStopPressed(self, button):
        self.teensy_load.stop()
        self.stop.set_sensitive(False)
        self.go.set_sensitive(True)
        self.running = False

    def onGoPressed(self, button):
        self.setValues()
        self.stop.set_sensitive(True)
        self.go.set_sensitive(False)
        self.running = True

    def saveToFileChanged(self, button):
        if button.get_active():
            self.filename = os.path.expanduser(
                datetime.now().strftime('~/tl-meter/%Y%m%d-%H%M%S.dat'))
            os.makedirs(os.path.expanduser('~/tl-meter'), exist_ok=True)
            self.logfp = open(self.filename, 'w', buffering=1)
            self.add_comment.set_sensitive(True)
        else:
            self.filename = None
            self.logfp = None
            self.add_comment.set_sensitive(False)

    def onSampleChanged(self, combo):
        self.sample_ms = int(combo.get_active_id())
        if self.running:
            self.setValues()

    def onSmoothChanged(self, combo):
        smooth_str = combo.get_active_id()
        if smooth_str == 'off':
            self.smooth = None
        else:
            self.smooth = int(smooth_str)

    def onOpenPreferences(self, button):
        print("Open preferences...")

    def addComment(self, button):
        comment = self.comment_text.get_text()
        t = datetime.now().timestamp() - self.t0
        print('# {}: {}'.format(t, comment), file=self.logfp)
        self.comment_text.set_text('')

    def onCurrentChanged(self, button):
        if self.setPowerLimit() and self.running:
            self.setValues()

    def onVoltageChanged(self, button):
        if self.setPowerLimit() and self.running:
            self.setValues()

    def setValues(self):
        current = self.current_set.get_value()
        voltage = self.voltage_set.get_value()
        self.teensy_load.start(self.sample_ms, current, voltage)

    def setPowerLimit(self):
        current = self.current_set.get_value()
        voltage = self.voltage_set.get_value()
        power = current * voltage
        if power <= POWER_LIMIT:
            return True
        self.power_limit.show()
        GObject.timeout_add(2000, self.hidePowerLimit)
        voltage_limit = math.floor(POWER_LIMIT / current * 100) / 100
        self.voltage_set.set_value(voltage_limit)
        return False

    def hidePowerLimit(self):
        self.power_limit.hide()
        return False

builder = Gtk.Builder()
builder.add_from_file("tl-meter.glade")
handler= Handler(builder)
builder.connect_signals(handler)

win = builder.get_object("top-level")
win.show_all()

handler.power_limit.hide()

Gtk.main()
